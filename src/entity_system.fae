import fae::collections::list::List

import faylib::Vec2
import sprite::Textures
import entities::player::Player
import entities::missile::Missile
import entities::enemy::Enemy

const SlabSize = 10
const MaxGeneration = 4294967295 // u32 max

// TODO: Make fields internal once language has traits
generic T
struct EntityList {
	entities: List<T>
	generations: List<GenerationInfo>
	free_ranges: List<Range>
	generation: u32
}

struct GenerationInfo {
	added: u32
	removed: u32
}

method GenerationInfo
fn may_be_ticked(current_generation: u32): bool {
	return current_generation < self.removed and self.added < current_generation
}

method static EntityList
fn new(): EntityList<T> {
	return EntityList<T> {
		entities: List<T>.new()
		generations: List<GenerationInfo>.new()
		free_ranges: List<Range>.new()
		generation: 0
	}
}

method mut EntityList
fn free() {
	self.entities.free()
	self.generations.free()
	self.free_ranges.free()
}

method mut EntityList
fn push(entity: T): EntityHandle<T> {
	if self.free_ranges.is_empty() {
		let index = self.entities.length()

		self.entities.push(entity)
		self.generations.push(GenerationInfo {
			added: self.generation
			removed: MaxGeneration
		})

		return EntityHandle<T> {
			index: index.(u32)
			generation: self.generation
		}
	}

	let range = self.free_ranges.items[0].&mut
	let index = range.start
	range.start += 1
	if range.is_empty() => self.free_ranges.remove(0)

	self.entities.items[index] = entity
	let info = self.generations.items[index].&mut
	assert(info.removed <= self.generation and info.added == MaxGeneration)
	info.* = GenerationInfo {
		added: self.generation
		removed: MaxGeneration
	}

	return EntityHandle<T> {
		index: index.(u32)
		generation: self.generation
	}
}

method mut EntityList
fn remove(handle: EntityHandle<T>) {
	let entity_index = handle.index.(isize)

	let info = self.generations.items[entity_index].&mut
	if info.added != handle.generation or info.removed <= self.generation => return
	info.* = GenerationInfo {
		added: MaxGeneration
		removed: self.generation
	}

	// Find free range with this index on the boundary
	//     If found, expand
	//     Merge with surrounding if necessary
	//
	// Otherwise insert new free range at approprate location

	let ranges = self.free_ranges.items

	mut left_edge: isize = 0
	mut right_edge = ranges.length
	mut middle: isize = 0

	mut has_left = false
	mut has_right = false

	mut after_or_on_left = false
	mut before_or_on_right = false

	while left_edge <= right_edge {
		middle = (left_edge + right_edge) / 2

		has_left = middle - 1 >= 0
		after_or_on_left = has_left.! or ranges[middle - 1].end <= entity_index

		has_right = middle < ranges.length
		before_or_on_right = has_right.! or entity_index <= ranges[middle].start - 1

		if after_or_on_left and before_or_on_right => break

		let range = ranges[middle]
		if range.end <= entity_index => left_edge = middle + 1
		else if range.start > entity_index => right_edge = middle - 1
		else {
			assert(range.contains(entity_index))
			// Somehow we found an existing range which contains the index
			// This should *never* happen and indicates a logic error
			panicf("Removed entity already a free range")
		}
	}

	let left_index = middle - 1
	let right_index = middle

	if has_left and ranges[left_index].end == entity_index {
		// We are on the right edge of the range to the left of us
		// Include us in the range
		ranges[left_index].end += 1

		// If there is a range to the right and it butts up against
		// our range then combine them
		if has_right and ranges[left_index].end == ranges[right_index].start {
			ranges[left_index].end = ranges[right_index].end
			self.free_ranges.remove(right_index)
		}

		return
	}

	if has_right and entity_index + 1 == ranges[right_index].start {
		// We are on the left edge of the range to the right of us
		// Include us in the range
		ranges[right_index].start -= 1

		// If there is a range to the left and it butts up against
		// our range then combine them
		if has_left and ranges[left_index].end == ranges[right_index].start {
			ranges[left_index].end = ranges[right_index].end
			self.free_ranges.remove(right_index)
		}

		return
	}

	// We must not be on an existing range boundary
	// Insert a new free range at the current range index
	let range = entity_index..entity_index + 1
	self.free_ranges.insert(range, middle)
}

method EntityList
fn assert_free_ranges_actually_free() {
	for range in self.free_ranges.items {
		for entity_index in range {
			let info = self.generations.get(entity_index)
			assert(info.may_be_ticked(self.generation).!)
		}
	}
}

method EntityList
fn dump_debugging() {
	println(f"Overall capacity: {self.entities.length()}")

	for range, _, is_last in self.free_ranges.items {
		print(f"{range.start}..{range.end} (capacity: {range.length()})")
		if is_last.! => print(", ")
	}

	println("")
	println("")

	for range in self.free_ranges.items {
		if range.length() == 1 {
			print("o")
			continue
		}

		print("<")
		for _, _, is_last in range.start + 1..range.end {
			if is_last => print(">")
			else => print("-")
		}
	}
}

generic T
struct EntityHandle {
	index: u32
	generation: u32
}

struct EntitySystem {
	player: EntityList<Player>
	missile: EntityList<Missile>
	enemy: EntityList<Enemy>
	// bomb: EntityList<Bomb>
}

method static EntitySystem
fn new(): EntitySystem {
	return EntitySystem {
		player: EntityList<Player>.new()
		missile: EntityList<Missile>.new()
		enemy: EntityList<Enemy>.new()
		// bomb: EntityList<Bomb>.new()
	}
}

generic T
struct Context {
	viewport_size: Vec2
	textures: &Textures
	entity_system: &mut EntitySystem
	generation: u32
	delta: f32
	handle: EntityHandle<T>
}

method mut EntitySystem
fn tick(textures: &Textures, viewport_size: Vec2, delta: f32) {
	// Newly added entities are not ticked until the following frame
	// Removed entities are still ticked on the frame they are removed

	self.player.generation += 1
	self.missile.generation += 1
	self.enemy.generation += 1

	for info, index in self.player.generations.items {
		if info.may_be_ticked(self.player.generation).! => continue
		mut context = Context<Player> {
			viewport_size
			textures
			entity_system: self
			generation: self.player.generation
			delta
			handle: EntityHandle<Player> {
				index: index.(u32),
				generation: info.added
			}
		}

		self.player.entities.items[index].tick(context.&mut)
	}

	for info, index in self.missile.generations.items {
		if info.may_be_ticked(self.missile.generation).! => continue
		mut context = Context<Missile> {
			viewport_size
			textures
			entity_system: self
			generation: self.missile.generation
			delta
			handle: EntityHandle<Missile> {
				index: index.(u32),
				generation: info.added
			}
		}

		self.missile.entities.items[index].tick(context.&mut)
	}

	for info, index in self.enemy.generations.items {
		if info.may_be_ticked(self.enemy.generation).! => continue
		mut context = Context<Enemy> {
			viewport_size
			textures
			entity_system: self
			generation: self.enemy.generation
			delta
			handle: EntityHandle<Enemy> {
				index: index.(u32),
				generation: info.added
			}
		}

		self.enemy.entities.items[index].tick(context.&mut)
	}

	// fae::io::terminal::clear()
	// self.missile.dump_debugging()
}

method mut EntitySystem
fn free() {
	self.player.free()
	self.missile.free()
	self.enemy.free()
	// self.bomb.free()
}
