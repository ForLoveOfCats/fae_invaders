import faylib::Font, Vec2, Color
import rectangle::Rectangle
import entity_system::EntitySystem
import sprite::Textures
import user_interface::UserInterface, Timer

const GameEndDelay = 1

enum Scene {
	MainMenu { start: bool }
	DifficultySelector { one: bool, two: bool, three: bool }
	InGame { difficulty: isize, shield_health: i32 }
	Lost { reason: str, ok: bool, timer: Timer }
	Won { ok: bool, timer: Timer }
}

method mut Scene
fn transitioned(context: *mut Context) {
	match self {
		MainMenu => self.transitioned(context)
		DifficultySelector => self.transitioned(context)
		InGame => self.transitioned(context)
		Lost => self.transitioned(context)
		Won => self.transitioned(context)
	}
}

method mut Scene
fn tick(context: *mut Context) {
	match self {
		MainMenu => self.tick(context)
		DifficultySelector => self.tick(context)
		InGame => self.tick(context)
		Lost => self.tick(context)
		Won => self.tick(context)
	}

	context.user_interface.tick(context)
	context.entity_system.tick(context)
}

struct SceneTracker {
	scene: *mut Scene
	next_scene: Option<Scene> internal
}

method static SceneTracker
fn new(scene: *mut Scene): SceneTracker {
	return SceneTracker { scene, next_scene: .None }
}

method mut SceneTracker
fn transition(to: Scene) {
	self.next_scene = .Some(to)
}

method mut SceneTracker
fn handle_transition(context: *mut Context) {
	if self.next_scene is next: Some {
		context.entity_system.clear()
		context.user_interface.clear()

		self.scene.* = next
		self.scene.transitioned(context)

		self.next_scene = .None
	}
}

struct Context {
	textures: *Textures
	entity_system: *mut EntitySystem
	user_interface: *mut UserInterface
	font: Font
	scene_tracker: *mut SceneTracker
	viewport_size: Vec2
	delta: f32
}

method static Scene::MainMenu
fn new(): Scene {
	return .MainMenu { start: false }
}

method mut Scene::MainMenu
fn transitioned(context: *mut Context) {
	context.user_interface.heading = "Fae Invaders"
	context.user_interface.push(user_interface::Item.Button {
		disabled: false
		text: "Start"
		pressed: self.start.&mut
	})
}

method mut Scene::MainMenu
fn tick(context: *mut Context) {
	if self.start {
		context.scene_tracker.transition(Scene::DifficultySelector.new())
	}
}

method static Scene::DifficultySelector
fn new(): Scene {
	return .DifficultySelector {
		one: false
		two: false
		three: false
	}
}

method mut Scene::DifficultySelector
fn transitioned(context: *mut Context) {
	context.user_interface.heading = "Select Difficulty"
	context.user_interface.push(.Button {
		disabled: false
		text: "Easy"
		pressed: self.one.&mut
	})
	context.user_interface.push(.Button {
		disabled: false
		text: "Normal"
		pressed: self.two.&mut
	})
	context.user_interface.push(.Button {
		disabled: false
		text: "Hard"
		pressed: self.three.&mut
	})
	context.user_interface.selection = 1
}

method mut Scene::DifficultySelector
fn tick(context: *mut Context) {
	if self.one => context.scene_tracker.transition(Scene::InGame.new(1))
	else if self.two => context.scene_tracker.transition(Scene::InGame.new(2))
	else if self.three => context.scene_tracker.transition(Scene::InGame.new(3))
}


method static Scene::InGame
fn new(difficulty: isize): Scene {
	return .InGame { difficulty, shield_health: 3 }
}

method mut Scene::InGame
fn transitioned(context: *mut Context) {
	import entities::player::Player
	import entities::enemy::Enemy, Direction

	for y_offset in 0..self.difficulty * 2 {
		let direction: Direction = if y_offset % 2 == 0  => yield Direction.Left
		else => yield Direction.Right
		let y_offset = y_offset.(f32) * context.textures.enemy.height.(f32) * 1.6

		for x_offset in -5..6 {
			let x_offset = x_offset.(f32) * context.textures.enemy.width.(f32) * 1.55
			let position = Vec2 {
				x: context.viewport_size.x / 2 + x_offset
				y: context.textures.enemy.height.(f32) + y_offset
			}
			Enemy.spawn(context.textures, context.entity_system, position, direction)
		}
	}
	
	Player.spawn(context.textures, context.entity_system, context.viewport_size)
}

method mut Scene::InGame
fn tick(context: *mut Context) {
	const ShieldHeight = 30

	if context.entity_system.player.all_dead() {
		let reason = "You Died!"
		context.scene_tracker.transition(Scene::Lost.new(reason))
		return
	}

	if context.entity_system.enemy.all_dead() {
		context.scene_tracker.transition(Scene::Won.new())
		return
	}

	for offset in 1..self.shield_health.(isize) + 1 {
		let height = offset.(f32) * ShieldHeight
		let rectangle = Rectangle {
			x: 0
			y: context.viewport_size.y - height
			width: context.viewport_size.x
			height
		}

		let color = Color.rgba(50, 50, 255, 50)
		faylib::draw_rectangle(rectangle, color)
	}
}

method static Scene::Lost
fn new(reason: str): Scene {
	return .Lost {
		reason
		ok: false
		timer: Timer.new(GameEndDelay)
	}
}

method mut Scene::Lost
fn transitioned(context: *mut Context) {
	self.setup_ui(context, true)
}

method mut Scene::Lost
fn tick(context: *mut Context) {
	if self.timer.tick(context.delta) is Fired {
		self.setup_ui(context, false)
	}

	if self.ok => context.scene_tracker.transition(Scene::MainMenu.new())
}

method mut Scene::Lost
fn setup_ui(context: *mut Context, disabled: bool) {
	context.user_interface.clear()
	context.user_interface.heading = self.reason
	context.user_interface.push(.Button {
		disabled
		text: "Continue"
		pressed: self.ok.&mut
	})
}


method static Scene::Won
fn new(): Scene {
	return .Won {
		ok: false
		timer: Timer.new(GameEndDelay)
	}
}

method mut Scene::Won
fn transitioned(context: *mut Context) {
	self.setup_ui(context, true)
}

method mut Scene::Won
fn tick(context: *mut Context) {
	if self.timer.tick(context.delta) is Fired {
		self.setup_ui(context, false)
	}

	if self.ok => context.scene_tracker.transition(Scene::MainMenu.new())
}

method mut Scene::Won
fn setup_ui(context: *mut Context, disabled: bool) {
	context.user_interface.clear()
	context.user_interface.heading = "You Won!"
	context.user_interface.push(.Button {
		disabled
		text: "Continue"
		pressed: self.ok.&mut
	})
}
