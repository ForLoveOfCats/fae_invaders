const LogAll = 0
const LogTrace = 1
const LogDebug = 2
const LogInfo = 3
const LogWarning = 4
const LogError = 5
const LogFatal = 6
const LogNone = 7

extern "InitWindow"
fn init_window(width: i32, height: i32, title: &u8)

extern "CloseWindow"
fn close_window()

extern "WindowShouldClose"
fn window_should_close(): bool

extern "GetCurrentMonitor"
fn get_current_monitor(): Monitor

extern "GetMonitorRefreshRate"
fn get_monitor_refresh_rate(monitor: Monitor): i32

extern "ClearBackground"
fn clear_background(color: Color)

extern "BeginDrawing"
fn begin_drawing()

extern "EndDrawing"
fn end_drawing()

extern "SetTargetFPS"
fn set_target_fps(fps: i32)

extern "GetFrameTime"
fn get_frame_time(): f32

extern "SetTraceLogLevel"
fn set_trace_log_level(log_level: i32)

extern "DrawRectangleV"
fn draw_rectangle(position: Vec2, size: Vec2, color: Color)

extern "LoadImage"
fn load_image(path: &u8): Image

extern "LoadTexture"
fn load_texture(path: &u8): Texture2D

extern "LoadTextureFromImage"
fn load_texture_from_image(image: Image): Texture2D

extern "UnloadTexture"
fn unload_texture(texture: Texture2D)

extern "DrawTextureV"
fn draw_texture(texture: Texture2D, position: Vec2, tint: Color)

extern "IsKeyDown"
fn is_key_down(key: i32): bool

extern "IsKeyPressed"
fn is_key_pressed(key: i32): bool

struct Monitor {
	id: i32
}

struct Color {
	r: u8
	g: u8
	b: u8
	a: u8
}

method static Color
fn white(): Color {
	return Color { r: 255, g: 255, b: 255, a: 255 }
}

method static Color
fn rgb(r: u8, g: u8, b: u8): Color {
	return Color { r, g, b, a: 255 }
}

method static Color
fn rgba(r: u8, g: u8, b: u8, a: u8): Color {
	return Color { r, g, b, a }
}

struct Vec2 {
	x: f32
	y: f32
}

method static Vec2
fn zero(): Vec2 {
	return Vec2 { x: 0, y: 0 }
}

struct Image {
	data: &mut u8
	width: i32
	height: i32
	mipmaps: i32
	format: i32
}

struct Texture2D {
	id: u32
	width: i32
	height: i32
	mipmaps: i32
	format: i32
}
