import fae.collections.list.List

import faylib.Color, Vec2, draw_rectangle
import rectangle.Rectangle

const Height = 34
const Width = 380
const Padding = 10

const SelectionInset = 12
const SelectionWidth = Height - SelectionInset - SelectionInset
const SelectionHeight = SelectionWidth

enum Item {
	disabled: bool

	Button {
		text: str
		pressed: *mut bool
	}
}

method static Item.Button
fn new(text: str, pressed: *mut bool): Item {
	return .Button { disabled: false, text, pressed }
}

method mut Item
fn tick(scene_context: *mut scene.Context, rectangle: Rectangle, selected: bool) {
	match self {
		Button {
			draw_rectangle(rectangle, Color.rgb(200, 200, 200))

			const TextOffset = SelectionInset + SelectionWidth + SelectionInset
			let position = Vec2 { x: rectangle.x + TextOffset, y: rectangle.y + 8 }
			faylib.draw_text(scene_context.font, self.text.pointer, position, 20, 2, Color.black())

			if self.disabled == true => return
			if selected and is_fire_pressed() => self.pressed.* = true
		}
	}
}

enum TimerStatus {
	Fired
	None
}

struct Timer {
	remaining: f32 internal
	already_fired: bool internal
}

method static Timer
fn new(delay: f32): Timer {
	return Timer {
		remaining: delay
		already_fired: false
	}
}

method mut Timer
fn tick(delta: f32): TimerStatus {
	if self.already_fired => return .None
	self.remaining -= delta

	if self.remaining <= 0 {
		self.already_fired = true
		return .Fired
	}

	return .None
}

struct UserInterface {
	heading: str
	items: List<Item>
	selection: isize
}

method static UserInterface
fn new(): UserInterface {
	return UserInterface {
		heading: ""
		items: List<Item>.new()
		selection: 0
	}
}

method mut UserInterface
fn free() {
	self.items.free()
}

method mut UserInterface
fn clear() {
	self.heading = ""
	self.items.clear()
	self.selection = 0
}

method mut UserInterface
fn push(item: Item) {
	self.items.push(item)
}

method mut UserInterface
fn tick(scene_context: *mut scene.Context) {
	import faylib.is_key_pressed

	if is_key_pressed(key.W) => self.selection -= 1
	if is_key_pressed(key.S) => self.selection += 1
	self.selection = self.selection.min(self.items.length() - 1).max(0)

	let items_height = Height * self.items.length().(f32)
	let padding_height = Padding * (self.items.length().(f32) - 1)
	let overall_height = items_height + padding_height

	let center_y = scene_context.viewport_size.y / 2
	let top = center_y - overall_height / 2

	let center_x = scene_context.viewport_size.x / 2
	let x = center_x - Width / 2

	if self.heading.length > 0 {
		faylib.draw_text(
			scene_context.font
			self.heading.pointer
			Vec2 { x: x + 5, y: top - Padding - 24 }
			30
			2
			Color.rgb(0, 0, 0)
		)
	}

	mut y = top
	for item, index of self.items.items {
		let rectangle = Rectangle { x, y, width: Width, height: Height }
		let selected = self.selection == index
		item.tick(scene_context, rectangle, selected)

		if selected {
			let rectangle = Rectangle {
				x: x + SelectionInset
				y: y + SelectionInset
				width: SelectionWidth
				height: SelectionHeight
			}

			let color = if item.disabled => yield Color.rgb(100, 100, 100)
			else => yield Color.rgb(255, 0, 160)

			draw_rectangle(rectangle, color)
		}

		y += Height + Padding
	}
}

fn is_fire_pressed(): bool {
	for key in []i32 { key.Enter, key.Space, key.K } {
		if faylib.is_key_pressed(key) => return true
	}

	return false
}
