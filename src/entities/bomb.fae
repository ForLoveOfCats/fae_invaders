import faylib.Vec2
import sprite.Sprite, Textures
import sound.Sounds
import entity_system.EntitySystem, Context
import entities.explosion.Explosion

struct Bomb {
	sprite: Sprite
}

method static Bomb
fn fire(textures: *Textures, sounds: *mut Sounds, entity_system: *mut EntitySystem, position: Vec2) {
	entity_system.bomb.push(Bomb {
		sprite: Sprite {
			texture: textures.bomb.&
			position
		}
	})

	sounds.bomb_drop.play()
}

method mut Bomb
fn tick(context: *mut Context<Bomb>) {
	const Speed = 75 // Pixels per second

	let speed = Speed * context.delta
	let distance = Vec2 { x: 0, y: speed }
	let reached = self.sprite.move(context.viewport_size, distance)

	if reached.bottom {
		context.entity_system.bomb.remove(context.handle)
		Explosion.spawn(context.textures, context.sounds, context.entity_system, self.sprite.position)

		context.scene.shield_health -= 1
		context.sounds.shield_damaged.play()

		if context.scene.shield_health <= 0 {
			let reason = "The Shield Was Detroyed!"
			context.scene_tracker.transition(.Lost.new(reason))
		}
	}

	mut iterator = context.entity_system.player.iterator()
	while iterator.next() is player: Some {
		if self.sprite.overlaps(player.entity.sprite) {
			context.entity_system.player.remove(player.handle)
			context.entity_system.bomb.remove(context.handle)
			context.sounds.ship_explosion.play()
		}
	}

	self.sprite.draw()
}
