import faylib::Vec2
import sprite::Sprite, Textures
import sound::Sounds
import entity_system::EntitySystem, Context
import entities::explosion::Explosion

struct Missile {
	sprite: Sprite
}

method static Missile
fn fire(textures: *Textures, sounds: *mut Sounds, entity_system: *mut EntitySystem, position: Vec2) {
	entity_system.missile.push(Missile {
		sprite: Sprite {
			texture: textures.missile.&
			position
		}
	})

	sounds.missile_fire.play()
}

method mut Missile
fn tick(context: *mut Context<Missile>) {
	const Speed = 1400 // Pixels per second

	let speed = Speed * context.delta
	let distance = Vec2 { x: 0, y: -speed }
	let reached = self.sprite.move(context.viewport_size, distance)
	if reached.top => context.entity_system.missile.remove(context.handle)

	mut iterator = context.entity_system.enemy.iterator()
	while iterator.next() is enemy: Some {
		if self.sprite.overlaps(enemy.entity.sprite) {
			context.entity_system.enemy.remove(enemy.handle)
			context.entity_system.missile.remove(context.handle)
			Explosion.spawn(context.textures, context.sounds, context.entity_system, enemy.entity.sprite.position)
		}
	}

	mut iterator = context.entity_system.bomb.iterator()
	while iterator.next() is bomb: Some {
		if self.sprite.overlaps(bomb.entity.sprite) {
			context.entity_system.bomb.remove(bomb.handle)
			context.entity_system.missile.remove(context.handle)
			Explosion.spawn(context.textures, context.sounds, context.entity_system, bomb.entity.sprite.position)
		}
	}

	self.sprite.draw()
}
