import faylib::Vec2
import sprite::Sprite, Textures
import entity_system::EntitySystem, EntityHandle, Context
import entities::enemy::Enemy
import entities::bomb::Bomb

struct Missile {
	sprite: Sprite
}

method static Missile
fn fire(textures: &Textures, entity_system: &mut EntitySystem, position: Vec2) {
	entity_system.missile.push(Missile {
		sprite: Sprite {
			texture: textures.missile.&
			position
		}
	})
}

method mut Missile
fn tick(context: &mut Context<Missile>) {
	const Speed = 900 // Pixels per second

	let speed = Speed * context.delta
	let distance = Vec2 { x: 0, y: -speed }
	let reached = self.sprite.move(context.viewport_size, distance)
	if reached.top => context.entity_system.missile.remove(context.handle)

	// This is dumb as hell and would *not* fly in a more complex project
	for info, index in context.entity_system.enemy.generations.items {
		if info.may_be_ticked(context.generation).! => continue

		let enemy = context.entity_system.enemy.entities.get_ref(index)
		if self.sprite.overlaps(enemy.sprite) {
			let generation = context.entity_system.enemy.generations.items[index].added
			let handle = EntityHandle<Enemy> { index: index.(u32), generation }
			context.entity_system.enemy.remove(handle)

			context.entity_system.missile.remove(context.handle)
		}
	}

	for info, index in context.entity_system.bomb.generations.items {
		if info.may_be_ticked(context.generation).! => continue

		let bomb = context.entity_system.bomb.entities.get_ref(index)
		if self.sprite.overlaps(bomb.sprite) {
			let generation = context.entity_system.bomb.generations.items[index].added
			let handle = EntityHandle<Bomb> { index: index.(u32), generation }
			context.entity_system.bomb.remove(handle)

			context.entity_system.missile.remove(context.handle)
		}
	}

	self.sprite.draw()
}
