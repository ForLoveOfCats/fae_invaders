import faylib::Color, Vec2
import rectangle::Rectangle
import sprite::Textures
import entity_system::EntitySystem
import scene::Scene, Context
import user_interface::UserInterface

const TargetWidth = 900
const TargetHeight = 680
const MinFrameRate = 60

fn main() {
	faylib::set_trace_log_level(faylib::LogWarning)
	seed_random()
	let scale = set_up_window()
	let viewport_size = Vec2 { x: TargetWidth, y: TargetHeight }

	let render_texture = faylib::load_render_texture(TargetWidth, TargetHeight)
	defer faylib::unload_render_texture(render_texture)
	faylib::set_texture_filter(render_texture.texture, faylib::TextureFilterPoint)

	let textures = Textures.load()
	defer textures.free()

	mut entity_system = EntitySystem.new()
	defer entity_system.free()

	mut scene = Scene::MainMenu.new()
	mut user_interface = UserInterface.new()
	defer user_interface.free()
	mut context = Context {
		textures: textures.&
		entity_system: entity_system.&mut
		user_interface: user_interface.&mut
		font: faylib::get_default_font()
		scene: scene.&mut
		viewport_size
		delta: 0
	}

	scene.transitioned(context.&mut)

	while faylib::window_should_close().! {
		context.delta = faylib::get_frame_time()

		faylib::begin_drawing()
		defer faylib::end_drawing()

		faylib::begin_texture_mode(render_texture)
		faylib::clear_background(Color.white())
		scene.tick(context.&mut)
		faylib::end_texture_mode()

		faylib::clear_background(Color.white())
		let target_width = render_texture.texture.width.(f32)
		let target_height = render_texture.texture.height.(f32)
		faylib::draw_texture_pro(
			render_texture.texture
			Rectangle { x: 0, y: 0, width: target_width, height: -target_height }
			Rectangle { x: 0, y: 0, width: target_width * scale, height: target_height * scale }
			Vec2.zero()
			0
			Color.white()
		)
	}
}

fn seed_random() {
	import fae::libc::TimeT, time

	let null = null_pointer<TimeT>()
	let seed = time(null).time_t.(u32)
	faylib::set_random_seed(seed)
}

fn set_up_window(): f32 {
	faylib::init_window(TargetWidth, TargetHeight, "Fae Invaders".pointer)

	let monitor = faylib::get_current_monitor()
	let width = faylib::get_monitor_width(monitor)
	let height = faylib::get_monitor_height(monitor)

	let scale: i32 = if width > TargetWidth * 3 and height > TargetHeight * 3 {
		yield 3
	} else if width > TargetWidth * 2 and height > TargetHeight * 2 {
		yield 2
	} else {
		yield 1
	}
	println(f"Chose a scale factor of {scale}")

	faylib::set_window_size(TargetWidth * scale, TargetHeight * scale)
	println(f"Set window size of {TargetWidth * scale}x{TargetHeight * scale}")

	// This would not work on Wayland, good thing Raylib/GLFW still uses X11/Xwayland ðŸ˜…
	let x = width / 2 - TargetWidth * scale / 2
	let y = height / 2 - TargetHeight * scale / 2
	faylib::set_window_position(x, y)

	mut refresh_rate = faylib::get_monitor_refresh_rate(monitor)
	if refresh_rate < MinFrameRate => refresh_rate = MinFrameRate
	faylib::set_target_fps(refresh_rate)
	println(f"Set refresh rate of {refresh_rate}hz")

	return scale.(f32)
}
